// Generated from /Users/bartosz/IdeaProjects/TinyGP/src/main/java/antlr/Bobaro.g4 by ANTLR 4.10.1
package visitor;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class BobaroLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, INT_VAL=3, STRING_VAL=4, BOOL=5, NULL=6, COMMENT=7, OR=8, 
		AND=9, EQUAL=10, INT=11, TRUE=12, FALSE=13, STRING=14, NOT_EQUAL=15, GREATER=16, 
		LESS=17, GREATER_EQUAL=18, LESS_EQUAL=19, BRACKET_L=20, BRACKET_R=21, 
		SQ_BRACKET_L=22, SQ_BRACKET_R=23, PARENT_L=24, PARENT_R=25, ADD_=26, SUBTRACT_=27, 
		MULTIPLY=28, DIVIDE=29, MODULO=30, IF=31, ELSE=32, FOR=33, SEMICOLON=34, 
		COMMA=35, IDENTIFIER=36, WS=37;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "INT_VAL", "STRING_VAL", "BOOL", "NULL", "COMMENT", "OR", 
			"AND", "EQUAL", "INT", "TRUE", "FALSE", "STRING", "NOT_EQUAL", "GREATER", 
			"LESS", "GREATER_EQUAL", "LESS_EQUAL", "BRACKET_L", "BRACKET_R", "SQ_BRACKET_L", 
			"SQ_BRACKET_R", "PARENT_L", "PARENT_R", "ADD_", "SUBTRACT_", "MULTIPLY", 
			"DIVIDE", "MODULO", "IF", "ELSE", "FOR", "SEMICOLON", "COMMA", "IDENTIFIER", 
			"WS"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'sysIn()'", "'printl('", null, null, "'boolean'", "'null'", null, 
			"'||'", "'&&'", "'='", "'int'", "'true'", "'false'", "'string'", "'!='", 
			"'>'", "'<'", "'>='", "'<='", "'('", "')'", "'['", "']'", "'{'", "'}'", 
			"'+'", "'-'", "'*'", "'/'", "'%'", "'if'", "'else'", "'for'", "';'", 
			"','"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, "INT_VAL", "STRING_VAL", "BOOL", "NULL", "COMMENT", 
			"OR", "AND", "EQUAL", "INT", "TRUE", "FALSE", "STRING", "NOT_EQUAL", 
			"GREATER", "LESS", "GREATER_EQUAL", "LESS_EQUAL", "BRACKET_L", "BRACKET_R", 
			"SQ_BRACKET_L", "SQ_BRACKET_R", "PARENT_L", "PARENT_R", "ADD_", "SUBTRACT_", 
			"MULTIPLY", "DIVIDE", "MODULO", "IF", "ELSE", "FOR", "SEMICOLON", "COMMA", 
			"IDENTIFIER", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public BobaroLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Bobaro.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000%\u00e2\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
		"\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b"+
		"\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002"+
		"\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002"+
		"\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002"+
		"\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002"+
		"\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002"+
		"\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002"+
		"\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007"+
		"!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0005\u0002^\b\u0002"+
		"\n\u0002\f\u0002a\t\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0005\u0003g\b\u0003\n\u0003\f\u0003j\t\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0005\u0006"+
		"\u007f\b\u0006\n\u0006\f\u0006\u0082\t\u0006\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\b\u0001\b\u0001\b\u0001\t\u0001\t\u0001\n\u0001\n\u0001\n"+
		"\u0001\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000f"+
		"\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0014"+
		"\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0017"+
		"\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u001a"+
		"\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001d"+
		"\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001f\u0001\u001f"+
		"\u0001\u001f\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001 \u0001 \u0001"+
		"!\u0001!\u0001\"\u0001\"\u0001#\u0001#\u0005#\u00d7\b#\n#\f#\u00da\t#"+
		"\u0001$\u0004$\u00dd\b$\u000b$\f$\u00de\u0001$\u0001$\u0000\u0000%\u0001"+
		"\u0001\u0003\u0002\u0005\u0003\u0007\u0004\t\u0005\u000b\u0006\r\u0007"+
		"\u000f\b\u0011\t\u0013\n\u0015\u000b\u0017\f\u0019\r\u001b\u000e\u001d"+
		"\u000f\u001f\u0010!\u0011#\u0012%\u0013\'\u0014)\u0015+\u0016-\u0017/"+
		"\u00181\u00193\u001a5\u001b7\u001c9\u001d;\u001e=\u001f? A!C\"E#G$I%\u0001"+
		"\u0000\b\u0001\u000019\u0001\u000009\u0002\u0000\"\"\\\\\u0004\u0000\n"+
		"\n\r\r\"\"\\\\\u0002\u0000\n\n\r\r\u0002\u0000AZaz\u0003\u000009AZaz\u0003"+
		"\u0000\t\n\r\r  \u00e7\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0003"+
		"\u0001\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0007"+
		"\u0001\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b\u0001"+
		"\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000"+
		"\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000"+
		"\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000"+
		"\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u001b\u0001\u0000"+
		"\u0000\u0000\u0000\u001d\u0001\u0000\u0000\u0000\u0000\u001f\u0001\u0000"+
		"\u0000\u0000\u0000!\u0001\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0000"+
		"\u0000%\u0001\u0000\u0000\u0000\u0000\'\u0001\u0000\u0000\u0000\u0000"+
		")\u0001\u0000\u0000\u0000\u0000+\u0001\u0000\u0000\u0000\u0000-\u0001"+
		"\u0000\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u00001\u0001\u0000\u0000"+
		"\u0000\u00003\u0001\u0000\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u0000"+
		"7\u0001\u0000\u0000\u0000\u00009\u0001\u0000\u0000\u0000\u0000;\u0001"+
		"\u0000\u0000\u0000\u0000=\u0001\u0000\u0000\u0000\u0000?\u0001\u0000\u0000"+
		"\u0000\u0000A\u0001\u0000\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000"+
		"E\u0001\u0000\u0000\u0000\u0000G\u0001\u0000\u0000\u0000\u0000I\u0001"+
		"\u0000\u0000\u0000\u0001K\u0001\u0000\u0000\u0000\u0003S\u0001\u0000\u0000"+
		"\u0000\u0005[\u0001\u0000\u0000\u0000\u0007b\u0001\u0000\u0000\u0000\t"+
		"m\u0001\u0000\u0000\u0000\u000bu\u0001\u0000\u0000\u0000\rz\u0001\u0000"+
		"\u0000\u0000\u000f\u0083\u0001\u0000\u0000\u0000\u0011\u0086\u0001\u0000"+
		"\u0000\u0000\u0013\u0089\u0001\u0000\u0000\u0000\u0015\u008b\u0001\u0000"+
		"\u0000\u0000\u0017\u008f\u0001\u0000\u0000\u0000\u0019\u0094\u0001\u0000"+
		"\u0000\u0000\u001b\u009a\u0001\u0000\u0000\u0000\u001d\u00a1\u0001\u0000"+
		"\u0000\u0000\u001f\u00a4\u0001\u0000\u0000\u0000!\u00a6\u0001\u0000\u0000"+
		"\u0000#\u00a8\u0001\u0000\u0000\u0000%\u00ab\u0001\u0000\u0000\u0000\'"+
		"\u00ae\u0001\u0000\u0000\u0000)\u00b0\u0001\u0000\u0000\u0000+\u00b2\u0001"+
		"\u0000\u0000\u0000-\u00b4\u0001\u0000\u0000\u0000/\u00b6\u0001\u0000\u0000"+
		"\u00001\u00b8\u0001\u0000\u0000\u00003\u00ba\u0001\u0000\u0000\u00005"+
		"\u00bc\u0001\u0000\u0000\u00007\u00be\u0001\u0000\u0000\u00009\u00c0\u0001"+
		"\u0000\u0000\u0000;\u00c2\u0001\u0000\u0000\u0000=\u00c4\u0001\u0000\u0000"+
		"\u0000?\u00c7\u0001\u0000\u0000\u0000A\u00cc\u0001\u0000\u0000\u0000C"+
		"\u00d0\u0001\u0000\u0000\u0000E\u00d2\u0001\u0000\u0000\u0000G\u00d4\u0001"+
		"\u0000\u0000\u0000I\u00dc\u0001\u0000\u0000\u0000KL\u0005s\u0000\u0000"+
		"LM\u0005y\u0000\u0000MN\u0005s\u0000\u0000NO\u0005I\u0000\u0000OP\u0005"+
		"n\u0000\u0000PQ\u0005(\u0000\u0000QR\u0005)\u0000\u0000R\u0002\u0001\u0000"+
		"\u0000\u0000ST\u0005p\u0000\u0000TU\u0005r\u0000\u0000UV\u0005i\u0000"+
		"\u0000VW\u0005n\u0000\u0000WX\u0005t\u0000\u0000XY\u0005l\u0000\u0000"+
		"YZ\u0005(\u0000\u0000Z\u0004\u0001\u0000\u0000\u0000[_\u0007\u0000\u0000"+
		"\u0000\\^\u0007\u0001\u0000\u0000]\\\u0001\u0000\u0000\u0000^a\u0001\u0000"+
		"\u0000\u0000_]\u0001\u0000\u0000\u0000_`\u0001\u0000\u0000\u0000`\u0006"+
		"\u0001\u0000\u0000\u0000a_\u0001\u0000\u0000\u0000bh\u0005\"\u0000\u0000"+
		"cd\u0005\\\u0000\u0000dg\u0007\u0002\u0000\u0000eg\b\u0003\u0000\u0000"+
		"fc\u0001\u0000\u0000\u0000fe\u0001\u0000\u0000\u0000gj\u0001\u0000\u0000"+
		"\u0000hf\u0001\u0000\u0000\u0000hi\u0001\u0000\u0000\u0000ik\u0001\u0000"+
		"\u0000\u0000jh\u0001\u0000\u0000\u0000kl\u0005\"\u0000\u0000l\b\u0001"+
		"\u0000\u0000\u0000mn\u0005b\u0000\u0000no\u0005o\u0000\u0000op\u0005o"+
		"\u0000\u0000pq\u0005l\u0000\u0000qr\u0005e\u0000\u0000rs\u0005a\u0000"+
		"\u0000st\u0005n\u0000\u0000t\n\u0001\u0000\u0000\u0000uv\u0005n\u0000"+
		"\u0000vw\u0005u\u0000\u0000wx\u0005l\u0000\u0000xy\u0005l\u0000\u0000"+
		"y\f\u0001\u0000\u0000\u0000z{\u0005/\u0000\u0000{|\u0005/\u0000\u0000"+
		"|\u0080\u0001\u0000\u0000\u0000}\u007f\b\u0004\u0000\u0000~}\u0001\u0000"+
		"\u0000\u0000\u007f\u0082\u0001\u0000\u0000\u0000\u0080~\u0001\u0000\u0000"+
		"\u0000\u0080\u0081\u0001\u0000\u0000\u0000\u0081\u000e\u0001\u0000\u0000"+
		"\u0000\u0082\u0080\u0001\u0000\u0000\u0000\u0083\u0084\u0005|\u0000\u0000"+
		"\u0084\u0085\u0005|\u0000\u0000\u0085\u0010\u0001\u0000\u0000\u0000\u0086"+
		"\u0087\u0005&\u0000\u0000\u0087\u0088\u0005&\u0000\u0000\u0088\u0012\u0001"+
		"\u0000\u0000\u0000\u0089\u008a\u0005=\u0000\u0000\u008a\u0014\u0001\u0000"+
		"\u0000\u0000\u008b\u008c\u0005i\u0000\u0000\u008c\u008d\u0005n\u0000\u0000"+
		"\u008d\u008e\u0005t\u0000\u0000\u008e\u0016\u0001\u0000\u0000\u0000\u008f"+
		"\u0090\u0005t\u0000\u0000\u0090\u0091\u0005r\u0000\u0000\u0091\u0092\u0005"+
		"u\u0000\u0000\u0092\u0093\u0005e\u0000\u0000\u0093\u0018\u0001\u0000\u0000"+
		"\u0000\u0094\u0095\u0005f\u0000\u0000\u0095\u0096\u0005a\u0000\u0000\u0096"+
		"\u0097\u0005l\u0000\u0000\u0097\u0098\u0005s\u0000\u0000\u0098\u0099\u0005"+
		"e\u0000\u0000\u0099\u001a\u0001\u0000\u0000\u0000\u009a\u009b\u0005s\u0000"+
		"\u0000\u009b\u009c\u0005t\u0000\u0000\u009c\u009d\u0005r\u0000\u0000\u009d"+
		"\u009e\u0005i\u0000\u0000\u009e\u009f\u0005n\u0000\u0000\u009f\u00a0\u0005"+
		"g\u0000\u0000\u00a0\u001c\u0001\u0000\u0000\u0000\u00a1\u00a2\u0005!\u0000"+
		"\u0000\u00a2\u00a3\u0005=\u0000\u0000\u00a3\u001e\u0001\u0000\u0000\u0000"+
		"\u00a4\u00a5\u0005>\u0000\u0000\u00a5 \u0001\u0000\u0000\u0000\u00a6\u00a7"+
		"\u0005<\u0000\u0000\u00a7\"\u0001\u0000\u0000\u0000\u00a8\u00a9\u0005"+
		">\u0000\u0000\u00a9\u00aa\u0005=\u0000\u0000\u00aa$\u0001\u0000\u0000"+
		"\u0000\u00ab\u00ac\u0005<\u0000\u0000\u00ac\u00ad\u0005=\u0000\u0000\u00ad"+
		"&\u0001\u0000\u0000\u0000\u00ae\u00af\u0005(\u0000\u0000\u00af(\u0001"+
		"\u0000\u0000\u0000\u00b0\u00b1\u0005)\u0000\u0000\u00b1*\u0001\u0000\u0000"+
		"\u0000\u00b2\u00b3\u0005[\u0000\u0000\u00b3,\u0001\u0000\u0000\u0000\u00b4"+
		"\u00b5\u0005]\u0000\u0000\u00b5.\u0001\u0000\u0000\u0000\u00b6\u00b7\u0005"+
		"{\u0000\u0000\u00b70\u0001\u0000\u0000\u0000\u00b8\u00b9\u0005}\u0000"+
		"\u0000\u00b92\u0001\u0000\u0000\u0000\u00ba\u00bb\u0005+\u0000\u0000\u00bb"+
		"4\u0001\u0000\u0000\u0000\u00bc\u00bd\u0005-\u0000\u0000\u00bd6\u0001"+
		"\u0000\u0000\u0000\u00be\u00bf\u0005*\u0000\u0000\u00bf8\u0001\u0000\u0000"+
		"\u0000\u00c0\u00c1\u0005/\u0000\u0000\u00c1:\u0001\u0000\u0000\u0000\u00c2"+
		"\u00c3\u0005%\u0000\u0000\u00c3<\u0001\u0000\u0000\u0000\u00c4\u00c5\u0005"+
		"i\u0000\u0000\u00c5\u00c6\u0005f\u0000\u0000\u00c6>\u0001\u0000\u0000"+
		"\u0000\u00c7\u00c8\u0005e\u0000\u0000\u00c8\u00c9\u0005l\u0000\u0000\u00c9"+
		"\u00ca\u0005s\u0000\u0000\u00ca\u00cb\u0005e\u0000\u0000\u00cb@\u0001"+
		"\u0000\u0000\u0000\u00cc\u00cd\u0005f\u0000\u0000\u00cd\u00ce\u0005o\u0000"+
		"\u0000\u00ce\u00cf\u0005r\u0000\u0000\u00cfB\u0001\u0000\u0000\u0000\u00d0"+
		"\u00d1\u0005;\u0000\u0000\u00d1D\u0001\u0000\u0000\u0000\u00d2\u00d3\u0005"+
		",\u0000\u0000\u00d3F\u0001\u0000\u0000\u0000\u00d4\u00d8\u0007\u0005\u0000"+
		"\u0000\u00d5\u00d7\u0007\u0006\u0000\u0000\u00d6\u00d5\u0001\u0000\u0000"+
		"\u0000\u00d7\u00da\u0001\u0000\u0000\u0000\u00d8\u00d6\u0001\u0000\u0000"+
		"\u0000\u00d8\u00d9\u0001\u0000\u0000\u0000\u00d9H\u0001\u0000\u0000\u0000"+
		"\u00da\u00d8\u0001\u0000\u0000\u0000\u00db\u00dd\u0007\u0007\u0000\u0000"+
		"\u00dc\u00db\u0001\u0000\u0000\u0000\u00dd\u00de\u0001\u0000\u0000\u0000"+
		"\u00de\u00dc\u0001\u0000\u0000\u0000\u00de\u00df\u0001\u0000\u0000\u0000"+
		"\u00df\u00e0\u0001\u0000\u0000\u0000\u00e0\u00e1\u0006$\u0000\u0000\u00e1"+
		"J\u0001\u0000\u0000\u0000\u0007\u0000_fh\u0080\u00d8\u00de\u0001\u0006"+
		"\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}